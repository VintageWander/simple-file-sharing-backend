// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  public
  shared
  private
}

enum Extension {
  png
  jpg
  jpeg
  svg
}

model User {
  id String @id @default(uuid())

  username String @unique
  email    String @unique

  password String

  refreshToken String @default("")

  myFolders Folder[]
  myFiles   File[]

  sharedToMeFolders Folder[] @relation("FolderCollaborator")
  sharedToMeFiles   File[]   @relation("FileCollaborator")

  myTags Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id String @id @default(uuid())

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  collaborators User[] @relation("FolderCollaborator")

  parentFolder   Folder? @relation("NestedFolders", fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId String? // Use create_unchecked and update_unchecked to make this work!!!

  childFolders Folder[] @relation("NestedFolders")
  childFiles   File[]

  folderName String
  visibility Visibility
  tags       Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, parentFolderId, folderName])
}

model File {
  id String @id @default(uuid())

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  collaborators User[] @relation("FileCollaborator")

  parentFolder   Folder @relation(fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId String

  filename   String
  extension  Extension
  visibility Visibility
  tags       Tag[]
  versions   FileVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, parentFolderId, filename, extension])
}

model FileVersion {
  id String @id @default(uuid())

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String

  versionNumber BigInt
  
  @@unique([fileId, versionNumber])
}

model Tag {
  id String @id @default(uuid())

  tagName String 

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  files   File[]
  folders Folder[]

  @@unique([tagName, ownerId])
}
